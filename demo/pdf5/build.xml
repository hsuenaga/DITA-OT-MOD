<?xml version="1.0"?>
<project name="dita.pdf5.build"  basedir=".">
    <!-- Set property -->
    <property name="customization.dir" value="${basedir}/Customization"/>
    <property name="ot.dir" value="${basedir}/../.."/>
    <property name="i18n.lib.dir" value="${basedir}${file.separator}lib"/>
    <property name="i18n.home" value="${basedir}${file.separator}lib${file.separator}i18n_support"/>
    <property name="merged.file" value="${dita.map.filename.root}_MERGED.xml" />
    <property name="converted.merged.file" value="${dita.map.filename.root}_CONVERTED.xml" />
    <property name="xsl.dir" value="${basedir}${file.separator}xsl"/>
    
    <!-- XSLT parameter -->
    <property name="style.def.file" value="../config/default_style.xml"/>
    <property name="include.frontmatter.to.toc" value="no"/>
    <property name="add.numbering.title.prefix" value="yes" />
    <property name="add.part.to.title" value="yes" />
    <property name="add.thumbnail.index" value="yes" />
    <property name="assume.sortas.pinyin" value="no" />
    <property name="xml.lang" value="''" />
    <property name="output.pdf" value="${dita.map.filename.root}.pdf"/>
    <property name="make.see.link" value="yes"/>
    <property name="output.draft.comment" value="no"/>
    <property name="output.required.cleanup" value="no"/>
    <property name="gen_unique.id" value="yes"/>
    <property name="format.dl.as.block" value="yes"/>
    <property name="apply.toc.attr" value="yes"/>
    <property name="online.pdf" value="yes"/>
    <property name="use.i18n.index.lib" value="no"/>

    <!-- Select formatter (fop or ah) -->
    <property name="pdf.formatter" value="fop"/>
    <property name="pdf.formatter.debug" value="yes"/>
    <property name="xmllint" value="/opt/local/bin/xmllint"/>

    <!-- Check Formatter Specific Extentions -->
    <condition property="pdf.formatter.ah" value="yes">
        <equals arg1="${pdf.formatter}" arg2="ah"/>
    </condition>

    <condition property="pdf.formatter.fop" value="yes">
        <equals arg1="${pdf.formatter}" arg2="fop"/>
    </condition>

    <condition property="debug.xmllint">
        <and>
            <available file="${xmllint}"/>
            <equals arg1="${pdf.formatter.debug}" arg2="yes"/>
        </and>
    </condition>

    <condition property="no.debug.xmllint">
        <not><isset property="debug.xmllint"/></not>
    </condition>
    
    <!-- Check AH Formatter Environment -->
    <condition property="has.ahf.option">
        <and>
            <available file="${env.AHF_OPT}"/>
            <not>
                <equals arg1="${env.AHF_OPT}" arg2=""/>
            </not>
        </and>
    </condition>
    
    <condition property="ahf.dir" value="${env.AHF_DIR}">
        <and>
            <available file="${env.AHF_DIR}"/>
            <not>
                <equals arg1="${env.AHF_DIR}" arg2=""/>
            </not>
        </and>
    </condition>

    <condition property="ahf.cmd" value="run.sh">
        <available file="${env.AHF_DIR}/run.sh"/>
    </condition>

    <condition property="ahf.cmd" value="AHFCmd.exe">
        <and>
            <not>
                <isset property="ahf.cmd"/>
            </not>
            <available file="${env.AHF_DIR}/AHFCmd.exe"/>
        </and>
    </condition>

    <condition property="ahf.cmd" value="XSLCmd.exe">
        <and>
            <not>
                <isset property="ahf.cmd"/>
            </not>
            <available file="${env.AHF_DIR}/XSLCmd.exe"/>
        </and>
    </condition>

    <!-- Make absolute path for temporary directory -->
    <available property="build.temp.dir" value="${dita.temp.dir}" file="${dita.temp.dir}" type="dir" />
    <condition property="build.temp.dir" value="${caller.basedir}${file.separator}${dita.temp.dir}">
        <not>
            <isset property="build.temp.dir"/>
        </not>
    </condition>

    <path id="project.class.path">
        <pathelement path="${java.class.path}"/>
        <pathelement location="${i18n.lib.dir}${file.separator}ah_i18n_index.jar"/>
        <pathelement location="${i18n.lib.dir}${file.separator}i18n_support.jar"/>        
    </path>

    <!-- Main target -->
    <target name="merged2pdf">
        <echo message="dita.temp.dir=${dita.temp.dir} build.temp.dir=${build.temp.dir}"/>
        <echo message="dita.dir=${dita.dir}"/>
        <echo message="basedir=${basedir}"/>
        <echo message="outputFile=${dita.map.output.dir}${file.separator}${output.pdf}"/>
        <antcall target="transform.merged2pdf">
            <param name="inputFile"  value="${build.temp.dir}${file.separator}${merged.file}"/>
            <param name="outputFile" value="${dita.map.output.dir}${file.separator}${output.pdf}"/>
        </antcall>
    </target>

    <target name="transform.merged2pdf">

        <antcall target="transform.merged">
            <param name="inputFile" value="${inputFile}"/>
            <param name="outputFile" value="${dita.map.output.dir}${file.separator}${converted.merged.file}"/>
        </antcall>

        <antcall target="transform.merged2psmi">
            <param name="inputFile" value="${dita.map.output.dir}${file.separator}${converted.merged.file}"/>
            <param name="outputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}_psmi.fo"/>
        </antcall>

        <antcall target="transform.psmi2fo">
            <param name="inputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}_psmi.fo"/>
            <param name="outputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}_lint.fo"/>
        </antcall>

        <antcall target="xmllint.fo">
            <param name="inputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}_lint.fo"/>
            <param name="outputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}.fo"/>
        </antcall>

        <antcall target="no_xmllint.fo">
            <param name="inputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}_lint.fo"/>
            <param name="outputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}.fo"/>
        </antcall>

        <antcall target="transform.fo2pdf">
            <param name="inputFile" value="${dita.map.output.dir}${file.separator}${dita.map.filename.root}.fo"/>
            <param name="outputFile" value="${outputFile}"/>
        </antcall>

        <!--delete>
            <fileset dir="${dita.map.output.dir}" includes="${dita.map.filename.root}.fo"/>
        </delete-->
    </target>

    <!-- Convert merged middle file -->
    <target name="transform.merged">
        <property name="xsl.file" value="${xsl.dir}${file.separator}dita2fo_convmerged.xsl"/>
        <xslt processor="trax"
          in="${inputFile}"
          out="${outputFile}" style="${xsl.file}">
        </xslt>
    </target>

    <!-- Make XSL-FO(PSMI) from merged middle file -->
    <target name="transform.merged2psmi">
        
        <property name="xsl.file" value="${xsl.dir}${file.separator}dita2fo_shell.xsl"/>
        <!-- Enable Formatter Specific Extentions: fop or ah -->
        <property name="pdf.formatter.fop" value="yes"/>
        <property name="pdf.formatter.ah" value="no"/>

        <!-- XSLT Transformation Class Name -->
        <property name="transformer.classname" value="net.sf.saxon.Transform"/>
        
        <makeurl property="transform.merged2fo.input" file="${inputFile}" />
        
        <echo message="Stylesheet=${xsl.file}"/>
        <echo message="use.i18n.index.lib=${use.i18n.index.lib}"/>
        
        <java classname="${transformer.classname}" classpathref="project.class.path" failonerror="true">
            <arg line='-o "${outputFile}"'/>
            <arg line='"${transform.merged2fo.input}"'/>
            <arg line='"${xsl.file}"'/>
            <arg line='"PRM_STYLE_DEF_FILE=${style.def.file}"'/>
            <arg line='"PRM_INCLUDE_FRONTMATTER_TO_TOC=${include.frontmatter.to.toc}"'/>
            <arg line='"PRM_ADD_NUMBERING_TITLE_PREFIX=${add.numbering.title.prefix}"'/>
            <arg line='"PRM_ADD_PART_TO_TITLE=${add.part.to.title}"'/>
            <arg line='"PRM_ADD_THUMBNAIL_INDEX=${add.thumbnail.index}"'/>
            <arg line='"PRM_ASSUME_SORTAS_PINYIN=${assume.sortas.pinyin}"'/>
            <arg line='"PRM_LANG=${xml.lang}"'/>
            <arg line='"PRM_MAKE_SEE_LINK=${make.see.link}"'/>
            <arg line='"PRM_OUTPUT_DRAFT_COMMENT=${output.draft.comment}"'/>
            <arg line='"PRM_OUTPUT_REQUIRED_CLEANUP=${output.required.cleanup}"'/>
            <arg line='"PRM_GEN_UNIQUE_ID=${gen_unique.id}"'/>
            <arg line='"PRM_FORMAT_DL_AS_BLOCK=${format.dl.as.block}"'/>
            <arg line='"PRM_APPLY_TOC_ATTR=${apply.toc.attr}"'/>
            <arg line='"PRM_ONLINE_PDF=${online.pdf}"'/>
            <arg line='"PRM_USE_I18N_INDEX_LIB=${use.i18n.index.lib}"'/>
            <arg line='"PRM_PDF_FORMATTER_FOP=${pdf.formatter.fop}"'/>
            <arg line='"PRM_PDF_FORMATTER_AH=${pdf.formatter.ah}"'/>
            <sysproperty key="com.innodata.i18n.home" value="${i18n.home}"/>
            <sysproperty key="use.i18n.index.lib" value="${use.i18n.index.lib}"/>
        </java>
    </target>

    <!-- Make XSL-FO from XSL-FO(PSMI) -->
    <target name="transform.psmi2fo">
        
        <property name="xsl.file" value="${xsl.dir}${file.separator}psmi.xsl"/>
        
        <xslt processor="trax"
          in="${inputFile}"
          out="${outputFile}" style="${xsl.file}">
        </xslt>
        
    </target>

    <target name="xmllint.fo" if="debug.xmllint">
        <echo level="info" message="xmllint enabled: ${outputFile}."/>
        <exec executable="${xmllint}" logerror="true" failonerror="true">
          <arg value="--format"/>
          <arg value="--output"/>
          <arg value="${outputFile}"/>
          <arg value="${inputFile}"/>
        </exec>
    </target>

    <target name="no_xmllint.fo" if="no.debug.xmllint">
        <echo level="info" message="xmllint disabled."/>
        <copy file="${inputFile}" tofile="${outputFile}"/>
    </target>

    <!-- Make PDF from XSL-FO -->
    <target name="transform.fo2pdf">
        <antcall target="transform.fo2pdf.ahf">
            <param name="inputFile" value="${inputFile}"/>
            <param name="outputFile" value="${outputFile}"/>
        </antcall>
        <antcall target="transform.fo2pdf.fop">
            <param name="inputFile" value="${inputFile}"/>
            <param name="outputFile" value="${outputFile}"/>
        </antcall>
    </target>
    
    <target name="transform.fo2pdf.ahf" if="pdf.formatter.ah">
        <antcall target="transform.fo2pdf.ahf.check"/>
        <antcall target="transform.fo2pdf.ahf.option"/>
        <antcall target="transform.fo2pdf.ahf.nooption"/>
    </target>
    
    <target name="transform.fo2pdf.ahf.check">
        <fail unless="ahf.dir" message="AHF_DIR folder does not exist or AHF_DIR environment variable is missing."/>
        <fail unless="ahf.cmd" message="Missing AH Formatter commandline executable (Windows) or shell (Linux) file at AHF_DIR folder."/>
        <echo>AHF_DIR="${ahf.dir}"</echo>
        <echo>AHF_OPT="${env.AHF_OPT}"</echo>
        <echo>Execute command="${ahf.cmd}"</echo>
    </target>
    
    <target name="transform.fo2pdf.ahf.option" if="has.ahf.option">
        <exec executable="${ahf.dir}/${ahf.cmd}" logerror="true" failonerror="true">
            <arg value="-d"/>
            <arg value="${inputFile}"/>
            <arg value="-o"/>
            <arg value="${outputFile}"/>
            <arg value="-p"/>
            <arg value="@PDF"/>
            <arg value="-extlevel"/>
            <arg value="4"/>
            <arg value="-i"/>
            <arg value="${env.AHF_OPT}"/>
        </exec>
    </target>
    
    <target name="transform.fo2pdf.ahf.nooption" unless="has.ahf.option">
        <exec executable="${ahf.dir}/${ahf.cmd}" logerror="true" failonerror="true">
            <arg value="-d"/>
            <arg value="${inputFile}"/>
            <arg value="-p"/>
            <arg value="@PDF"/>
            <arg value="-o"/>
            <arg value="${outputFile}"/>
            <arg value="-extlevel"/>
            <arg value="4"/>
        </exec>
    </target>

    <target name="transform.fo2pdf.fop" if="pdf.formatter.fop">
        <!--Check fop lib-->
        <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
                <classpath>
                        <fileset dir="${fop.home}/lib">
                                <include name="*.jar"/>
                        </fileset>
                        <fileset dir="${fop.home}/build">
                                <include name="fop.jar"/>
                                <include name="fop-hyph.jar"/>
                        </fileset>
                </classpath>
        </taskdef>

        <condition property="outputFile" value="${dita.map.output.dir}/${outputFile.base}${xsl.formatter.ext}">
                <not><isset property="outputFile"/></not>
        </condition>

        <fop format="pdf" fofile="${inputFile}" basedir="${pdf2.temp.dir}" outfile="${outputFile}" messagelevel="error" relativebase="true" force="true" userconfig="../fo/fop/conf/fop.xconf"/>
    </target>
</project>
